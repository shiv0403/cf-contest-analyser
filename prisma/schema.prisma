// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Contest {
  id                  Int @id @default(autoincrement())
  contestId           Int @unique
  name                String
  type                String
  phase               String
  frozen              String
  durationSeconds     Int
  startTimeSeconds    Int
  relativeTimeSeconds Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
  problems            Problem[]
  userContests        UserContest[]
  submissions         Submission[]
  performanceMetrics  PerformanceMetrics[]
}

model Problem {
  id                    Int @id @default(autoincrement())
  contestId             Int
  contest               Contest @relation(fields: [contestId], references: [contestId])
  index                 String
  name                  String
  type                  String
  points                Int
  rating                Int
  tags                  String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt @default(now())
  submissions           Submission[]
  lockoutSubmissions    LockoutSubmission[]
}

model UserContest {
  id                  Int @id @default(autoincrement())
  contestId           Int
  contest             Contest @relation(fields: [contestId], references: [contestId])
  userHandle          String
  rank                Int
  oldRating           Int
  newRating           Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
}

model Submission {
  id                  Int @id @default(autoincrement())
  contestId           Int
  contest             Contest @relation(fields: [contestId], references: [contestId])
  problemId           Int
  problem             Problem @relation(fields: [problemId], references: [id])
  userHandle          String
  verdict             String
  language            String
  creationTimeSeconds Int
  relativeTimeSeconds Int
  timeConsumedMillis  Int?
  memoryConsumedBytes Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
  lockoutSubmission   LockoutSubmission?
}

model PerformanceMetrics {
  id                  Int @id @default(autoincrement())
  contestId           Int
  contest             Contest @relation(fields: [contestId], references: [contestId])
  userHandle          String
  ratingChange        String
  problemsSolved      Int
  totalProblems       Int
  avgTimePerProblem   Int
  successRate         Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
}

model AiAnalysis {
  id                  Int @id @default(autoincrement())
  userHandle          String
  analysis            Json @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
}

model User {
  id                 Int @id @default(autoincrement())
  userHandle         String @unique
  email              String @unique
  password           String
  firstName          String
  lastName           String
  avatarUrl          String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt @default(now())
  hostedLockouts     Lockout[] @relation("HostLockouts")
  invitedLockouts    Lockout[] @relation("InviteeLockouts")
  winnerLockouts     Lockout[] @relation("WinnerLockouts")
}

model Lockout {
  id                  Int @id @default(autoincrement())
  name                String
  inviteeId           Int
  invitee             User @relation("InviteeLockouts", fields: [inviteeId], references: [id])
  hostId              Int
  host                User @relation("HostLockouts", fields: [hostId], references: [id])
  winnerId            Int?
  winner              User? @relation("WinnerLockouts", fields: [winnerId], references: [id])
  durationSeconds     Int?
  startTime           DateTime?
  endTime             DateTime?
  inviteCode          String
  status              String
  problemIds          Int[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
  LockoutSubmissions  LockoutSubmission[]
}

model LockoutSubmission {
  id                  Int @id @default(autoincrement())
  lockoutId           Int
  lockout             Lockout @relation(fields: [lockoutId], references: [id])
  userHandle          String
  problemId           Int
  problem             Problem @relation(fields: [problemId], references: [id])
  submissionId        Int @unique
  submission          Submission @relation(fields: [submissionId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @default(now())
}